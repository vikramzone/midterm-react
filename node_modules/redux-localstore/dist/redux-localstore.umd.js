(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.index = {}));
}(this, function (exports) { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var isNull = function isNull(value) {
    return value === 'undefined' || value === null;
  };

  var hasSameProps = function hasSameProps(obj1, obj2) {
    return Object.keys(obj1).every(function (prop) {
      return obj2.hasOwnProperty(prop);
    });
  };

  var hasValidItemsType = function hasValidItemsType() {
    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return array.every(function (item) {
      return typeof item === 'string';
    });
  };

  var convertArrayToObject = function convertArrayToObject() {
    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return array.reduce(function (obj, item) {
      return _objectSpread2(_objectSpread2({}, obj), {}, _defineProperty({}, item, item));
    }, {});
  };

  var defaults = {
    storage: 'localStorage',
    blacklist: {}
  };
  var storeConfig = function storeConfig() {
    return defaults;
  };

  var setStorage = function setStorage(config) {
    if (config.hasOwnProperty('storage')) {
      defaults.storage = config.storage;
    }

    if (config.hasOwnProperty('blacklist')) {
      if (!hasValidItemsType(config.blacklist)) {
        throw new Error('Backlist item type should be string');
      }

      defaults.blacklist = convertArrayToObject(config.blacklist);
    }

    if (config.hasOwnProperty('whitelist')) {
      if (!hasValidItemsType(config.whitelist)) {
        throw new Error('Whitelist item type should be string');
      }

      defaults.whitelist = convertArrayToObject(config.whitelist);
    }
  };

  var getStorage = function getStorage() {
    return window[defaults.storage];
  };

  var getLocalStore = function getLocalStore() {
    try {
      return JSON.parse(getStorage().getItem('reduxStore'));
    } catch (e) {
      return {};
    }
  };

  var filterBlacklist = function filterBlacklist(state) {
    var localState = _objectSpread2({}, state);

    var _storeConfig = storeConfig(),
        blacklist = _storeConfig.blacklist;

    Object.keys(state).forEach(function (value) {
      if (blacklist[value]) {
        localState[value] = undefined;
      }
    });
    return localState;
  };

  var filterWhitelist = function filterWhitelist(state) {
    var localState = {};

    var _storeConfig2 = storeConfig(),
        whitelist = _storeConfig2.whitelist;

    Object.keys(state).forEach(function (value) {
      if (whitelist[value]) {
        localState[value] = state[value];
      }
    });
    return localState;
  };

  var getStoreToPersist = function getStoreToPersist(store) {
    if (storeConfig().whitelist) {
      return filterWhitelist(store.getState());
    }

    return filterBlacklist(store.getState());
  };

  var setLocalStore = function setLocalStore(store) {
    try {
      return getStorage().setItem('reduxStore', JSON.stringify(getStoreToPersist(store)));
    } catch (e) {
      return {};
    }
  };

  var defineState = function defineState(defaultState) {
    return function (reducer) {
      if (getState().hasOwnProperty(reducer)) {
        var localReducer = getState()[reducer];
        return hasSameProps(defaultState, localReducer) ? localReducer : defaultState;
      }

      return defaultState;
    };
  };
  var resetState = function resetState() {
    return getStorage().removeItem('reduxStore');
  };
  var getState = function getState() {
    return !isNull(getLocalStore()) ? getLocalStore() : {};
  };
  var reduxLocalstore = (function (store) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (config) {
      setStorage(config);
    }

    return store.subscribe(function () {
      return setLocalStore(store);
    });
  });

  exports.default = reduxLocalstore;
  exports.defineState = defineState;
  exports.getState = getState;
  exports.resetState = resetState;
  exports.storeConfig = storeConfig;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
